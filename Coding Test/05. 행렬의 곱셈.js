// 🕐 권장시간 : ❌ / 40분

/** 💯 제약 조건
 - 행렬 arr1, arr2의 행과 열의 길이는 2 이상 100 이하입니다.
 - 행렬 arr1, arr2의 원소는 -10 이상 20 이하인 자연수입니다.
 - 곱할 수 있는 배열만 주어집니다.
 */

/* 🚥 입출력 예시
- 입력1 : [[1, 4], [3, 2], [4, 1]]             입력2 : [[3, 3], [3, 3]]                      출력 : [[15, 15], [15, 15], [15, 15]]
- 입력1 : [[2, 3, 2], [4, 2, 4], [3, 1, 4]]    입력2 : [[5, 4, 3], [2, 4, 1], [3, 1, 1]]     출력 : [[22, 22, 11], [36, 28, 18], [29, 20, 14]]
*/

// 정수 배열 numbers가 주어집니다. numbers에서 서로 다른 인덱스에 있는 두 개의 수를 뽑아 더해서
// 만들 수 있는 모든 수를 배열에 오름차순으로 담아 return 하도록 solution 함수를 완성해주세요.

function solution(arr1, arr2) {
  const result = [];

  for (let i = 0; i < arr1.length; i++) {
    const row = [];

    for (let j = 0; j < arr2[0].length; j++) {
      let sum = 0;

      for (let k = 0; k < arr2.length; k++) {
        sum += arr1[i][k] * arr2[k][j];
      }
      row.push(sum);
    }
    result.push(row);
  }

  return result;
}

const answerA = solution(
  [
    [1, 4],
    [3, 2],
    [4, 1],
  ],
  [
    [3, 3],
    [3, 3],
  ]
);
const answerB = solution(
  [
    [2, 3, 2],
    [4, 2, 4],
    [3, 1, 4],
  ],
  [
    [5, 4, 3],
    [2, 4, 1],
    [3, 1, 1],
  ]
);

console.log(answerA); // [[15, 15], [15, 15], [15, 15]]
console.log(answerB); // [[22, 22, 11], [36, 28, 18], [29, 20, 14]]

/** 🔆 해설
 * 1. 인수로 받은 arr1과 arr2의 행과 열 정보를 변수에 기록합니다.
 * 2. 3중 반복문을 이용해서 행의 계산을 담을 row와 각 행렬의 곱셈의 합을 담을 sum을 만들어 줍니다.
 * 3. 해당 합을 row에 넣어주고 result 배열에 넣어줍니다.
 */
